<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YeMing Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 27 Apr 2018 14:58:50 +0800</pubDate>
    <lastBuildDate>Fri, 27 Apr 2018 14:58:50 +0800</lastBuildDate>
    <generator>Jekyll v3.8.0</generator>
    
      <item>
        <title>定时器 你真的会使用吗？</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;定时器的使用是软件开发基础技能，用于延时执行或重复执行某些方法。&lt;/p&gt;

&lt;p&gt;我相信大部分人接触iOS的定时器都是从这段代码开始的:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是你真的会用吗？&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;h2 id=&quot;ios定时器&quot;&gt;iOS定时器&lt;/h2&gt;

&lt;p&gt;首先来介绍iOS中的定时器&lt;/p&gt;

&lt;p&gt;iOS中的定时器大致分为这几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NSTimer&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GCD定时器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nstimer&quot;&gt;NSTimer&lt;/h3&gt;

&lt;h4 id=&quot;使用方法&quot;&gt;使用方法&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;NSTime&lt;/strong&gt;定时器是我们比较常使用的定时器，比较常使用的方法有两种：&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aTarget&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yesOrNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aTarget&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yesOrNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这两种方法都是创建一个定时器，区别是用&lt;code class=&quot;highlighter-rouge&quot;&gt;timerWithTimeInterval:&lt;/code&gt;方法创建的定时器需要手动加入RunLoop中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 创建NSTimer对象
NSTimer *timer = [NSTimer timerWithTimeInterval:3 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];
// 加入RunLoop中
[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要&lt;strong&gt;注意&lt;/strong&gt;的是： &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; 滑动时执行的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;被挂起，会导致定时器失效，等恢复为&lt;strong&gt;滑动结束&lt;/strong&gt;时才恢复定时器。其原因可以查看我这篇&lt;a href=&quot;http://www.jianshu.com/p/c4f552ceda63&quot;&gt;《Objective-C RunLoop 详解》&lt;/a&gt;中的 “RunLoop 的 Mode“章节，有详细的介绍。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startTimer{
    NSTimer *UIScrollView = [NSTimer timerWithTimeInterval:0.5 target:self selector:@selector(action:) userInfo:nil repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
}

- (void)action:(NSTimer *)sender {
    static int i = 0;
    NSLog(@&quot;NSTimer: %d&quot;,i);
    i++;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt;添加到&lt;strong&gt;NSDefaultRunLoopMode&lt;/strong&gt;中，没0.5秒打印一次，然后滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;打印台输出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-9de097ecc618b498.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出在滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时，定时器被暂停了。&lt;/p&gt;

&lt;p&gt;所以如果需要定时器在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; 拖动时也不影响的话，有两种解决方法&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;timer&lt;/strong&gt;分别添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;中&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITrackingRunLoopMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;直接将&lt;strong&gt;timer&lt;/strong&gt;添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt; 中：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRunLoop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainRunLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSRunLoopCommonModes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但并不是都&lt;strong&gt;timer&lt;/strong&gt;所有的需要在滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时继续执行，比如使用&lt;strong&gt;NSTimer&lt;/strong&gt;完成的帧动画，滑动&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;时就可以停止帧动画，保证滑动的流程性。&lt;/p&gt;

&lt;p&gt;若没有特殊要求的话，一般使用第二种方法创建完&lt;strong&gt;timer&lt;/strong&gt;，会自动添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;中去执行，也是平时最常用的方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(action:) userInfo:nil repeats:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TimeInterval&lt;/code&gt;：延时时间&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;:目标对象，一般就是&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;本身&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;:执行方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;:传入信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;:是否重复执行&lt;/p&gt;

&lt;p&gt;以上创建的定时器，若&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;参数设为&lt;code class=&quot;highlighter-rouge&quot;&gt;NO&lt;/code&gt;，执行一次后就会被释放掉;&lt;/p&gt;

&lt;p&gt;若&lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt;参数设为&lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt;重复执行时，必须手动关闭，否则定时器不会释放(停止）。&lt;/p&gt;

&lt;p&gt;释放方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 停止定时器
[timer invalidate];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际开发中，我们会将&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;对象设置为属性，这样方便释放。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS10.0&lt;/strong&gt; 推出了两个新的API，与上面的方法相比，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;换成Block回调以、减少传入的参数(那几个参数真是鸡肋)。不过开发中一般需要适配低版本，还是尽量使用上面的方法吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));

+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;###特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;必须加入Runloop&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;上面不管使用哪种方法，实际最后都会加入RunLoop中执行，区别就在于是否手动加入而已。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;存在延迟&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;不管是一次性的还是周期性的timer的实际触发事件的时间，都会与所加入的RunLoop和RunLoop Mode有关，如果此RunLoop正在执行一个连续性的运算，timer就会被延时出发。重复性的timer遇到这种情况，如果延迟超过了一个周期，则会在延时结束后立刻执行，并按照之前指定的周期继续执行，这个延迟时间大概为50-100毫秒.&lt;/p&gt;

    &lt;p&gt;所以NSTimer不是绝对准确的,而且中间耗时或阻塞错过下一个点,那么下一个点就pass过去了.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UIScrollView滑动会暂停计时&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt;的 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;滑动时会暂停，若不想被&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;滑动影响，需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 添加再到 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 或 直接添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt; 中&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##CADisplayLink&lt;/p&gt;

&lt;p&gt;CADisplayLink官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A CADisplayLink object is a timer object that allows your application to synchronize its drawing to the refresh rate of the display&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;对象是一个和屏幕刷新率同步的定时器对象。每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;发送一次指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;消息， CADisplayLink类对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; 就会被调用一次。&lt;/p&gt;

&lt;p&gt;从原理上可以看出，CADisplayLink适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染，或者做动画。
###使用方法&lt;/p&gt;

&lt;p&gt;创建：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@property (nonatomic, strong) CADisplayLink *displayLink;

self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(handleDisplayLink:)];  

// 每隔1帧调用一次
self.displayLink.frameInterval = 1;  

[self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;释放方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self.displayLink invalidate];  

self.displayLink = nil;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当把&lt;strong&gt;CADisplayLink&lt;/strong&gt;对象添加到runloop中后，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;就能被周期性调用，类似于重复的NSTimer被启动了；执行&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate&lt;/code&gt;操作时，CADisplayLink对象就会从runloop中移除，&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;调用也随即停止，类似于NSTimer的&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CADisplayLink&lt;/strong&gt;中有两个重要的属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;frameInterval&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;NSInteger类型的值，用来设置间隔多少帧调用一次&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;方法，默认值是1，即每帧都调用一次。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;duration&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFTimeInterval&lt;/code&gt;值为&lt;code class=&quot;highlighter-rouge&quot;&gt;readOnly&lt;/code&gt;，表示两次屏幕刷新之间的时间间隔。需要注意的是，该属性在&lt;code class=&quot;highlighter-rouge&quot;&gt;targe&lt;/code&gt;t的&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;被首次调用以后才会被赋值。&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;的调用间隔时间计算方式是：&lt;strong&gt;调用间隔时间 = duration × frameInterval&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;刷新频率固定&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;正常情况iOS设备的屏幕刷新频率是固定&lt;strong&gt;60Hz&lt;/strong&gt;,如果CPU过于繁忙，无法保证屏幕60次/秒的刷新率，就会导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;屏幕刷新时调用&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。但如果调用的方法比较耗时，超过了屏幕刷新周期，就会导致跳过若干次回调调用机会&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;适合做界面渲染&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;CADisplayLink可以确保系统渲染每一帧的时候我们的方法都被调用，从而保证了动画的流畅性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##GCD定时器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GCD定时器&lt;/strong&gt;和NSTimer是不一样的，NSTimer受RunLoop影响，但是GCD的定时器不受影响，因为通过源码可知RunLoop也是基于GCD的实现的，所以GCD定时器有非常高的精度。关于GCD的使用可一看看&lt;a href=&quot;http://www.cnblogs.com/pure/archive/2013/03/31/2977420.html&quot;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;###使用方法
创建GCD定时器定时器的方法稍微比较复杂，看下面的代码：&lt;/p&gt;

&lt;p&gt;####单次的延时调用
NSObject中的&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector:withObject:afterDelay:&lt;/code&gt;以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector:withObject:afterDelay:inModes:&lt;/code&gt; 这两个方法在调用的时候会设置当前 runloop 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; ，前者设置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDefaultRunLoopMode&lt;/code&gt; 运行，后者则可以指定 &lt;strong&gt;NSRunLoop&lt;/strong&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt; 来执行。我们上面介绍过 runloop 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITrackingRunLoopMode&lt;/code&gt; 被挂起，就导致了代码就会一直等待 &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; 的调度,解决办法在上面也有说明。&lt;/p&gt;

&lt;p&gt;不过我们可以用另一套方案来解决这个问题，就是使用GCD中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after&lt;/code&gt; 来实现单次的延时调用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [self someMethod];
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;####循环调用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 创建GCD定时器
dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);

dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), 1.0 * NSEC_PER_SEC, 0); //每秒执行

// 事件回调
dispatch_source_set_event_handler(_timer, ^{
        
    dispatch_async(dispatch_get_main_queue(), ^{
        // 在主线程中实现需要的功能
        
	}
}
    
});

// 开启定时器
dispatch_resume(_timer);

// 挂起定时器（dispatch_suspend 之后的 Timer，是不能被释放的！会引起崩溃）
dispatch_suspend(_timer);

// 关闭定时器
dispatch_source_cancel(_timer);
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面代码中要注意的是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_event_handler()&lt;/code&gt;中的任务实在子线程中执行的，若需要回到主线程，要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async(dispatch_get_main_queue(), ^{}&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_timer&lt;/code&gt; 中第二个参数，当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_time&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_TIME_NOW&lt;/code&gt; 时，系统会使用默认时钟来进行计时。然而当系统休眠的时候，默认时钟是不走的，也就会导致计时器停止。使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_walltime &lt;/code&gt; 可以让计时器按照真实时间间隔进行计时.&lt;/li&gt;
      &lt;li&gt;第三个参数， ` 1.0 * NSEC_PER_SEC` 为每秒执行一次，对应的还有毫秒，分秒，纳秒可以选择.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;dispatch_source_set_event_handler  这个函数在执行完之后，block 会立马执行一遍，后面隔一定时间间隔再执行一次。而 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; 第一次执行是到计时器触发之后。这也是和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; 之间的一个显著区别。&lt;/li&gt;
  &lt;li&gt;挂起（暂停）定时器, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_suspend&lt;/code&gt; 之后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer&lt;/code&gt;，不能被释放的,会引起崩溃.&lt;/li&gt;
  &lt;li&gt;创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt;一定要有&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_suspend(_timer)&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_cancel(_timer)&lt;/code&gt;这两句话来指定出口，否则定时器将不执行，若我们想无限循环可将 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_cancel(_timer)&lt;/code&gt; 写在一句永不执行的&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;判断语句中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##使用场景&lt;/p&gt;

&lt;p&gt;介绍完iOS中的各种定时器，接下来我们来说说这几种定时器在开发中的几种用法。
###短信重发倒计时&lt;/p&gt;

&lt;p&gt;短信倒计时使我们登录注册常用的功能，一般设置为60s，实现方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 计时时间
@property (nonatomic, assign) int timeout;

/** 开启倒计时 */
- (void)startCountdown {
    
    if (_timeout &amp;gt; 0) {
        return;
    }
    
    _timeout = 60;
    
    // GCD定时器
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    
    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
    
    dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), 1.0 * NSEC_PER_SEC, 0); //每秒执行
    
    dispatch_source_set_event_handler(_timer, ^{
        
        if(_timeout &amp;lt;= 0 ){// 倒计时结束
            
            // 关闭定时器
            dispatch_source_cancel(_timer);
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                //设置界面的按钮显示 根据自己需求设置
                [self.sendMsgBtn setTitle:@&quot;发送&quot; forState:UIControlStateNormal];
                
                self.sendMsgBtn.enabled = YES;
                
            });
            
        }else{// 倒计时中
            
            // 显示倒计时结果
            
            NSString *strTime = [NSString stringWithFormat:@&quot;重发(%.2d)&quot;, _timeout];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                //设置界面的按钮显示 根据自己需求设置
                
                [self.sendMsgBtn setTitle:[NSString stringWithFormat:@&quot;%@&quot;,strTime] forState:UIControlStateNormal];
                
                self.sendMsgBtn.enabled = NO;
                
            });
            
            _timeout--;
        }
    });
    
    // 开启定时器
    dispatch_resume(_timer);
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面代码中，我们设置了一个60s循环倒计时，当我们向服务器获取短信验证码成功时 调用该方法开始倒计时。每秒刷新按钮的倒计时数，倒计时结束时再将按钮 &lt;code class=&quot;highlighter-rouge&quot;&gt;Title&lt;/code&gt; 恢复为“发送”.&lt;/p&gt;

&lt;p&gt;有一点需要注意的是，按钮的样式要设置为 &lt;strong&gt;UIButtonTypeCustom&lt;/strong&gt;,否则会出现刷新 &lt;code class=&quot;highlighter-rouge&quot;&gt;Title&lt;/code&gt; 时闪烁.&lt;/p&gt;

&lt;p&gt;我们可以把这个方法封装一下，方便调用，否则在控制器中写这么一大段代码确实也不优雅。&lt;/p&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2178672-3d4d1353bcc36026.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;代码链接&quot;&gt;&lt;a href=&quot;https://github.com/qiubaiying/BYTimer&quot;&gt;代码链接&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;###每个几分钟向服务器发送数据&lt;/p&gt;

&lt;p&gt;在有定位服务的APP中，我们需要每个一段时间将定位数据发送到服务器，比如每5s定位一次每隔5分钟将再统一将数据发送服务器，这样会处理比较省电。
一般程序进入后台时，定时器会停止，但是在定位APP中，需要持续进行定位，APP在后台时依旧可以运行，所以在后台定时器也是可以运行的。&lt;/p&gt;

&lt;p&gt;注：关于iOS后台常驻,可以查看&lt;a href=&quot;http://waitingyuan.blog.163.com/blog/static/2155781652014111133150534/&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在使用GCD定时的时候发现GCD定时器也可以在后代运行，创建方法同上面的短信倒计时.&lt;/p&gt;

&lt;p&gt;这里我们使用&lt;strong&gt;NSTimer&lt;/strong&gt;来创建一个每个5分钟执行一次的定时器.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

typedef void(^TimerBlock)();

@interface BYTimer : NSObject

- (void)startTimerWithBlock:(TimerBlock)timerBlock;

- (void)stopTimer;

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;BYTimer.h&quot;

@interface BYTimer ()

@property (nonatomic, strong) NSTimer *timer;
@property (nonatomic, strong) TimerBlock timerBlock;

@end

@implementation BYTimer

- (void)startTimerWithBlock:(TimerBlock)timerBlock {

	 self.timer = [NSTimer timerWithTimeInterval:300 target:self selector:@selector(_timerAction) userInfo:nil repeats:YES];
	 
    [[NSRunLoop mainRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];
    _timerBlock = timerBlock;
    
}

- (void)_timerAction {
    if (self.timerBlock) {
        self.timerBlock();
    }
}

- (void)stopTimer {
    [self.timer invalidate];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该接口的实现很简单，就是 &lt;strong&gt;NSTimer&lt;/strong&gt; 创建了一个300s执行一次的定时器，但是要注意定时器需要加入&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoopCommonModes&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;要使定时器在后台能运行，app 就需要在 &lt;a href=&quot;http://waitingyuan.blog.163.com/blog/static/2155781652014111133150534/&quot;&gt;后台常驻&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;最后总结一下：&lt;/p&gt;

&lt;p&gt;NSTimer 使用简单方便，但是应用条件有限。&lt;/p&gt;

&lt;p&gt;CADisplayLink 刷新频率与屏幕帧数相同，用于绘制动画。具体使用可看我封装好的一个 &lt;a href=&quot;https://github.com/qiubaiying/WaterRippleView&quot;&gt;水波纹动画&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;GCD定时器 精度高，可控性强，使用稍复杂。&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/12/13/MD%E5%86%99%E4%BD%9C%E6%A8%A1%E6%9D%BF-%E4%B8%8A%E5%8D%8811.50.11/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/13/MD%E5%86%99%E4%BD%9C%E6%A8%A1%E6%9D%BF-%E4%B8%8A%E5%8D%8811.50.11/</guid>
        
        <category>iOS</category>
        
        <category>定时器</category>
        
        
      </item>
    
  </channel>
</rss>
